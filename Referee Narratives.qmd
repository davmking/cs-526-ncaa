---
title: "Referee Narratives"
format: html
---

# Libraries and Data

```{r}
#| label: libraries

library(tidyverse)
library(tidytext)
library(tidymodels)
library(viridis)
library(ggrepel)
library(ggridges)
library(randomForest)
```

```{r}
#| label: load data

basic_stats <- read.csv("FeatureElimination/Basic_Stats.csv") %>% 
  janitor::clean_names() %>%
  mutate(school_clean = if_else(
    str_detect(school, "NCAA"),
    substring(school, 1, nchar(school) - 5),
    school
  ), .after = school) %>% 
    mutate(school_clean_dict = case_when(
    school_clean == "Abilene Christian" ~ "Abilene Chrstn",
    school_clean == "Albany (NY)" ~ "UAlbany",
    school_clean == "Appalachian State" ~ "App State",
    school_clean == "Arizona State" ~ "Arizona St",
    school_clean == "Boise State" ~ "Boise St",
    school_clean == "Brigham Young" ~ "BYU",
    school_clean == "Cal State Bakersfield" ~ "Bakersfield",
    school_clean == "Cal State Fullerton" ~ "Fullerton",
    school_clean == "Cleveland State" ~ "Cleveland St",
    school_clean == "Coastal Carolina" ~ "Coastal Car",
    school_clean == "College of Charleston" ~ "Charleston",
    school_clean == "Colorado State" ~ "Colorado St",
    school_clean == "Connecticut" ~ "UConn",
    school_clean == "East Tennessee State" ~ "ETSU",
    school_clean == "Eastern Kentucky" ~ "E Kentucky",
    school_clean == "Eastern Washington" ~ "E Washington",
    school_clean == "FDU" ~ "Fair Dickinson",
    school_clean == "Florida Atlantic" ~ "FAU",
    school_clean == "Florida Gulf Coast" ~ "FGCU",
    school_clean == "Florida State" ~ "Florida St",
    school_clean == "Fresno State" ~ "Fresno St",
    school_clean == "George Washington" ~ "G Washington",
    school_clean == "Georgia State" ~ "Georgia St",
    school_clean == "Hawaii" ~ "Hawai'i",
    school_clean == "Jacksonville State" ~ "Jax State",
    school_clean == "Kansas State" ~ "Kansas St",
    school_clean == "Kennesaw State" ~ "Kennesaw St",
    school_clean == "Long Beach State" ~ "Long Beach St",
    school_clean == "Louisiana State" ~ "LSU",
    school_clean == "Loyola (IL)" ~ "Loyola Chicago",
    school_clean == "Maryland-Baltimore County" ~ "UMBC",
    school_clean == "Massachusetts" ~ "UMass",
    school_clean == "McNeese State" ~ "McNeese",
    school_clean == "Miami (FL)" ~ "Miami", # NOTE: May need to exclude
    school_clean == "Michigan State" ~ "Michigan St",
    school_clean == "Middle Tennessee" ~ "MTSU",
    school_clean == "Mississippi" ~ "Ole Miss",
    school_clean == "Mississippi State" ~ "Mississippi St",
    school_clean == "Montana State" ~ "Montana St",
    school_clean == "Morehead State" ~ "Morehead St",
    school_clean == "Mount St. Mary's" ~ "Mount St Marys",
    school_clean == "Murray State" ~ "Murray St",
    school_clean == "New Mexico State" ~ "New Mexico St",
    school_clean == "Norfolk State" ~ "Norfolk St",
    school_clean == "North Carolina Central" ~ "NC Central",
    school_clean == "North Dakota State" ~ "N Dakota St",
    school_clean == "Northern Kentucky" ~ "N Kentucky",
    school_clean == "Oklahoma State" ~ "Oklahoma St",
    school_clean == "Oregon State" ~ "Oregon St",
    school_clean == "Pennsylvania" ~ "Penn",
    school_clean == "Pittsburgh" ~ "Pitt",
    school_clean == "Saint Mary's (CA)" ~ "Saint Mary's",
    school_clean == "San Diego State" ~ "San Diego St",
    school_clean == "South Dakota State" ~ "S Dakota St",
    school_clean == "Southeast Missouri State" ~ "SE Missouri",
    school_clean == "Southern California" ~ "USC",
    school_clean == "Southern Methodist" ~ "SMU",
    school_clean == "St. Bonaventure" ~ "St Bonaventure",
    school_clean == "St. John's (NY)" ~ "St John's",
    school_clean == "Stephen F. Austin" ~ "SF Austin",
    school_clean == "Texas A&M-Corpus Christi" ~ "Texas A&M-CC",
    school_clean == "Virginia Commonwealth" ~ "VCU",
    school_clean == "Washington State" ~ "Washington St",
    school_clean == "Weber State" ~ "Weber St",
    school_clean == "Western Kentucky" ~ "Western KY",
    school_clean == "Western Michigan" ~ "W Michigan",
    school_clean == "Wichita State" ~ "Wichita St",
    school_clean == "Wright State" ~ "Wright St",
    TRUE ~ school_clean
  ), .after = school_clean) %>% 
  filter(!(school_clean %in% c("Long Island University",
                               "New Orleans",
                               "Wake Forest"))) %>% 
  mutate(year = factor(year)) %>% 
  mutate(conf_w_l = conf_wins / (conf_wins + conf_losses),
         .after = "conf_losses") %>% 
  mutate(home_w_l = home_wins / (home_wins + home_losses),
         .after = "home_losses") %>% 
  mutate(away_w_l = away_wins / (away_wins + away_losses),
         .after = "away_losses")
# Basic stats missing UCSB for some reason

load("data/game_info.RData")
load("data/pbp_data.RData")

pbp_data_long <- data.frame(pbp_data[["pbp_2024"]])

for(i in 2:length(pbp_data)){
  pbp_data_long <- rbind(pbp_data_long, pbp_data[[i]])
}

pbp_data_long <- pbp_data_long %>% 
  mutate(tournament = year(date), .after = "game_id") %>% 
  mutate(tournament = factor(tournament))


game_info_long <- data.frame(game_info[["game_info_2024"]])

for(i in 2:length(game_info)){
  game_info_long <- rbind(game_info_long, game_info[[i]])
}

game_info_long <- game_info_long %>% 
  mutate(tournament = year(date), .before = "date") %>% 
  mutate(tournament = factor(tournament))

tournament_fouls <- pbp_data_long %>% 
  mutate(description = str_to_lower(description)) %>% 
  filter(grepl("foul on", description)) %>% 
  mutate(team_on = case_when(
    action_team == "home" ~ home,
    action_team == "away" ~ away,
    TRUE ~ NA
  ), team_on_seed = case_when(
    action_team == "home" ~ home_seed,
    action_team == "away" & away_seed <= 16 ~ away_seed,
    TRUE ~ NA
  )) %>% 
  group_by(tournament, team_on) %>% 
  summarize(n_fouls = n(),
            n_games = n_distinct(game_id),
            team_on_seed = max(team_on_seed)) %>% 
  ungroup() %>% 
  mutate(fouls_per_game_tournament = n_fouls / n_games)


fouls_df <- basic_stats %>% 
  group_by(year, school_clean_dict) %>% 
  summarize(fouls = pf,
            fouls_per_game_season = pf / games_played) %>% 
  ungroup() %>% 
  mutate(year = factor(year)) %>% 
  right_join(tournament_fouls, by = c("year" = "tournament",
                                      "school_clean_dict" = "team_on")) %>% 
  filter(!is.na(fouls) & school_clean_dict != "Miami")


foul_diff_df <- pbp_data_long %>% 
  mutate(description = str_to_lower(description)) %>% 
  filter(grepl("foul on", description)) %>% 
  mutate(team_on = case_when(
    action_team == "home" ~ home,
    action_team == "away" ~ away,
    TRUE ~ NA
  ), team_on_seed = case_when(
    action_team == "home" ~ home_seed,
    action_team == "away" & away_seed <= 16 ~ away_seed,
    TRUE ~ NA
  )) %>% 
  group_by(game_id, tournament, team_on, team_on_seed) %>% 
  summarize(n_fouls = n()) %>% 
  ungroup() %>% 
  left_join(basic_stats %>% mutate(year = factor(year)),
            by = c("tournament" = "year", 
                                "team_on" = "school_clean_dict")) %>% 
  mutate(avg_fouls_season = pf / games_played,
         foul_diff = n_fouls - avg_fouls_season) %>% 
  left_join(game_info_long %>% select(game_id, starts_with("referee")),
            by = "game_id")

ref_counts <- game_info_long %>% 
  select(starts_with("referee")) %>% 
  pivot_longer(everything(), values_to = "referee") %>% 
  group_by(referee) %>% 
  summarize(total_games_reffed = n()) %>% 
  ungroup()

refs_of_interest <- foul_diff_df %>% 
  select(tournament, team_on, team_on_seed, n_fouls, avg_fouls_season, foul_diff,
         starts_with("referee")) %>% 
  pivot_longer(starts_with("referee"), names_to = "ref_id",
               values_to = "referee") %>% 
  filter(!is.na(foul_diff)) %>% 
  group_by(referee) %>% 
  summarize(mean_diff = mean(foul_diff),
            mean_abs_diff = mean(abs(foul_diff))) %>% 
  ungroup() %>% 
  left_join(ref_counts, by = "referee") %>% 
  filter(total_games_reffed > 2) %>% 
  arrange(desc(abs(mean_diff))) %>% 
  head(20) %>% 
  pull(referee)

load("data/ap_polls.RData")
load("data/coaches_polls.RData")

tournament_winners <- game_info_long %>% 
  group_by(tournament) %>% 
  slice_max(date) %>% 
  ungroup() %>% 
  mutate(winner = if_else(score_diff > 0, home, away)) %>% 
  select(tournament, winner)

# For the sake of argument, let's filter out the first four games
tournament_wins <- game_info_long %>% 
  pivot_longer(c("home", "away"), names_to = "which_team",
               values_to = "school") %>% 
  filter(arena_location != "Dayton, OH" & date != "2021-03-18") %>% 
  group_by(tournament, school) %>% 
  summarize(n_games = n()) %>% 
  ungroup() %>% 
  left_join(tournament_winners, by = "tournament") %>% 
  mutate(won_natty = if_else(school == winner, TRUE, FALSE)) %>% 
  select(-winner) %>% 
  mutate(total_wins = n_games + won_natty - 1) %>% 
  mutate(tournament_round = case_when(
    total_wins == 0 ~ "R64",
    total_wins == 1 ~ "R32",
    total_wins == 2 ~ "S16",
    total_wins == 3 ~ "E8",
    total_wins == 4 ~ "F4",
    total_wins == 5 ~ "Runner-Up",
    total_wins == 6 ~ "Champion",
    TRUE ~ NA
  )) %>% 
  mutate(tournament_round = factor(tournament_round, levels = c("R64", "R32",
                                                                "S16", "E8",
                                                                "F4",
                                                                "Runner-Up",
                                                                "Champion")))

tournament_preds <- tournament_wins %>% 
  left_join(basic_stats, by = c("tournament" = "year",
                                "school" = "school_clean_dict")) %>% 
  left_join(ap_polls, by = c("tournament" = "year",
                             "school" = "school_dict")) %>% 
  left_join(coaches_polls, by = c("tournament" = "year",
                                  "school" = "school_dict"),
            suffix = c("_ap", "_coaches"))

tournament_preds_fct <- tournament_preds %>% 
  mutate(across(c(starts_with("week_"), pre_ap, final_ap,
                  pre_coaches, final_coaches), ~ case_when(
    . < 5 ~ "1-5",
    . < 10 ~ "6-10",
    . < 15 ~ "11-15",
    . < 20 ~ "16-20",
    . < 25 ~ "21-25",
    is.na(.) ~ "Unranked",
    TRUE ~ NA
  ))) %>% 
  mutate(across(c(starts_with("week_"), pre_ap, final_ap,
                  pre_coaches, final_coaches), ~ factor(., levels = c("1-5", "6-10",
                                                             "11-15", "16-20",
                                                             "21-25", "Unranked",
                                                             NA))))

tournament_preds_fct <- tournament_preds_fct %>% 
  mutate(pre_tournament_ap = case_when(
    tournament == 2021 ~ week_16_ap,
    tournament %in% c(2015, 2016, 2017, 2018, 2022, 2023) ~ week_18_ap,
    tournament %in% c(2014, 2019) ~ week_19_ap,
    tournament == 2024 ~ week_20_ap,
    TRUE ~ NA
  ), .before = "final_ap") %>% 
  mutate(pre_tournament_coaches = case_when(
    tournament == 2021 ~ week_16_coaches,
    tournament %in% c(2018, 2022) ~ week_18_coaches,
    tournament %in% c(2015, 2016, 2017, 2019, 2023) ~ week_19_coaches,
    tournament %in% c(2014, 2024) ~ week_20_coaches,
    TRUE ~ NA
  ), .before = "final_coaches") 

tournament_preds_fct_reduced <- tournament_preds_fct %>% 
  select(total_wins, tournament_round, starts_with("week_"),
                pre_ap, final_ap,
                pre_coaches, final_coaches,
                pre_tournament_ap, pre_tournament_coaches) %>% 
  dplyr::select(-starts_with(c("week_17", "week_18", "week_19", "week_20"))) %>% 
  na.omit()

tournament_preds_fct_reduced_2 <- tournament_preds_fct_reduced %>% 
  dplyr::select(-starts_with("final"))

tpfr_ap <- tournament_preds_fct_reduced_2 %>% 
  dplyr::select(!ends_with("coaches"))

tpfr_coaches <- tournament_preds_fct_reduced_2 %>% 
  dplyr::select(!ends_with("ap"))

foul_disparity_games <- pbp_data_long %>% 
  mutate(description = str_to_lower(description)) %>% 
  filter(grepl("free throw", description)) %>% 
  mutate(team_shooting = if_else(action_team == "home", home, away)) %>% 
  group_by(game_id, tournament, referee_1, referee_2, referee_3, action_team,
           team_shooting) %>% 
  summarize(n_free_throws = n()) %>% 
  ungroup() %>% 
  pivot_wider(names_from = action_team, values_from = n_free_throws,
              id_cols = game_id) %>% 
  mutate(foul_disparity = abs(away - home),
         home_cooking = home - away) %>% 
  select(game_id, foul_disparity, home_cooking)


foul_disparity_games <- foul_disparity_games %>% 
  left_join(game_info_long, by = "game_id")


tournament_preds_fct_all <- tournament_preds_fct %>% 
  select(total_wins, tournament_round, starts_with("week_"),
                pre_ap, final_ap,
                pre_coaches, final_coaches,
                pre_tournament_ap, pre_tournament_coaches,
         simple_rating_system, strength_of_schedule,
         w_l, conf_w_l, home_w_l, away_w_l) %>% 
  select(-starts_with(c("week_17", "week_18", "week_19", "week_20"))) %>% 
  select(-starts_with("final")) %>% 
  na.omit()
```


# Betting Lines

```{r}
#| label: betting line plot

game_info_long %>% 
  filter(!is.na(line_error)) %>%
  ggplot(aes(x = line_error)) +
  geom_density(fill = "grey", alpha = 0.6) +
  geom_vline(xintercept = median(game_info_long$line_error,
                                 na.rm = TRUE),
             linetype = "dashed") +
  theme_bw() +
  labs(x = "High Seed Performance vs. Betting Line",
       y = "Density",
       title = "Betting Lines Slightly Overestimate Higher Seeds",
       subtitle = "Negative Values = Underperformance",
       caption = "Data from 2014-2024") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        panel.grid = element_blank()) +
  scale_y_continuous(labels = scales::percent_format())
# Negative score = we overestimated the team
# Negative score = home team underperformed expectations by x
```

Higher seeds are always the home team in the NCAA tournament. They are typically favored to win games. In this plot, we can see that betting lines are generally rather good, but more of the mass is on the negative side than the positive side, indicating that higher seeds are more likely than not to underperform the lines by which they are favored. This makes sense, empirically - NCAA tournament games tend to be closer than anticipated.

However, this is actually a very small margin - you won't make much money betting on this, since the median line error is -0.5 points.


```{r}
#| label: betting line plot by year

line_medians <- game_info_long %>% 
  group_by(tournament) %>% 
  summarize(med_line_error = median(line_error, na.rm = TRUE)) %>% 
  ungroup() %>% 
  na.omit()

game_info_long %>% 
  filter(!is.na(line_error)) %>% 
  ggplot(aes(x = line_error)) +
  geom_density(fill = "grey") +
  geom_vline(data = line_medians, aes(xintercept = med_line_error),
             linetype = "dashed") +
  facet_wrap(~tournament, nrow = 2) +
  theme_bw() +
  labs(x = "Higher Seed Performance vs. Betting Line",
       y = "Density",
       title = "Betting Lines Slightly Overestimate Higher Seeds",
       subtitle = "Negative Values = Underperformance") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        panel.grid = element_blank()) +
  scale_y_continuous(labels = scales::percent_format())


game_info_long %>% 
  filter(!is.na(line_error)) %>% 
  group_by(tournament) %>% 
  summarize(n = n(),
            avg_error = mean(line_error),
            sd_error = sd(line_error),
            med_error = median(line_error)) %>% 
  knitr::kable(digits = 2,
               col.names = c("Tournament", "Number of Games",
                             "Mean Line Error", "Line Error SD",
                             "Median Line Error"))
```

The betting lines have not varied in performance much over time, though they have spread out from massive modes at 0 in earlier years. We can see, in a very minor trend in the table, that in recent years betting lines have moved from overestimating higher seeds to underestimating them.

```{r}
#| label: over under overtime games

over_under_meds <- game_info_long %>% 
  filter(!is.na(over_under)) %>% 
  mutate(overtime_game = if_else(overtime_game == TRUE,
                                 "Overtime", "No Overtime")) %>% 
  group_by(overtime_game) %>% 
  summarize(med_ou = median(over_under)) %>% 
  ungroup()

game_info_long %>% 
  filter(!is.na(over_under)) %>% 
  mutate(overtime_game = if_else(overtime_game == TRUE,
                                 "Overtime", "No Overtime")) %>% 
  group_by(overtime_game) %>% 
  mutate(number_of_games = n()) %>% 
  ungroup() %>% 
  ggplot(aes(x = over_under, fill = factor(number_of_games))) +
  geom_density(alpha = 0.6) +
  geom_vline(data = over_under_meds, aes(xintercept = med_ou),
             linetype = "dashed") +
  facet_wrap(~overtime_game, scales = "free_y", ncol = 1) +
  theme_bw() +
  labs(x = "Total Score vs. Over/Under", y = "Density",
       title = "Bettors Overestimate Total Points, Except For Overtime Games",
       fill = "# of Games",
       subtitle = "Negative Values = Underperformance",
       caption = "Data from 2014-2024") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        #legend.position = "bottom",
        panel.grid = element_blank()) +
  scale_fill_viridis(discrete = TRUE) +
  scale_y_continuous(labels = scales::percent_format()) +
  guides(fill = guide_legend(reverse = TRUE))
```

In general, bettors set the over/under for games a little bit higher than is achieved empirically - with the exception of overtime games, which tend to go well over. However, overtime games are exceedingly rare, and not worth anticipating.


# Poll Data

The question: Do the analytics predict everything? Can the experts tell us things that the analytics maybe can't?

The answer: Strictly speaking, more or less yes. The most useful metrics are the actual performance metrics, not the preseason polls or anything of that sort. However, if you want to look at polls themselves, the early season polls (perhaps after a couple weeks, to avoid the truly bad insights) are actually the most predictive, suggesting that there is some merit in incorporating prior beliefs into NCAA tournament predictions.

## Part 1: Do Polls Out-Perform General Performance Metrics?

In this part, we ask whether polls can be better predictors of tournament outcomes than simple predictors such as win/loss, strength of schedule, or the simple rating system (basically, point differential weighted by SOS).

```{r}
#| label: random forest plots

set.seed(526)
rf_all_wins <- randomForest(total_wins ~ .-tournament_round,
                            data = tournament_preds_fct_all,
                            importance = TRUE)
set.seed(526)
rf_all_round <- randomForest(tournament_round ~ .-total_wins,
                             data = tournament_preds_fct_all,
                             importance = TRUE)

varImpPlot(rf_all_wins,
           main = "Strongest Predictors for Total Wins")
varImpPlot(rf_all_round,
           main = "Strongest Predictors for Tournament Round")
```

For total wins, the strongest predictors (i.e., MSE) are simple rating system, win/loss record, SOS, and then home, conference, and away win/loss record. However, the strongest differentiators (i.e., purity) keep the top 3 intact, but then go pre-tournament AP, and week 3/4 coaches poll. This suggests that record-based metrics are the best at predicting the number of wins a team will get, but when it comes to differentiating teams, polls still hold some weight.

For tournament round, the strongest predictors (i.e., accuracy) remain the same: simple rating systme, SOS, and win/loss record. However, week 16 coaches poll, preseason coaches poll, and week 3/4 AP poll are the next best predictors. The strongest differentiators (i.e., Gini) are the same in the first three, but then turn to away, home, and conference win/loss record. This is the opposite pattern from the total wins. This once again suggests that polls can provide some information on how far a team is expected to go in march madness.

## Part 2: Which Polls are Best?

```{r}
#| label: all polls RF

set.seed(526)
rf_all_polls_wins <- randomForest(total_wins ~ .-tournament_round,
                                  data = tournament_preds_fct_reduced_2,
                                  importance = TRUE)
varImpPlot(rf_all_polls_wins,
           main = "Strongest Predictors for Total Wins among Polls")

set.seed(526)
rf_all_polls_round <- randomForest(tournament_round ~ .-total_wins,
                                  data = tournament_preds_fct_reduced_2,
                                  importance = TRUE)
varImpPlot(rf_all_polls_round)
```

For total wins, the strongest predictors are the week 3/4 AP polls, preseason coaches poll, pre-tournament AP poll, and week 3/4 coaches poll. This indication that early-season polls are the most predictive makes sense to me: pre-season, you have prior beliefs of how good each team is capable of being. However, you don't know which teams are going to fall completely flat of their pre-season expectations. By waiting a couple weeks, you can remove the teams who are drastically underperforming, without waiting so long that you see talented teams do something stupid and overreact. For purity, week 16 coaches, week 3 coaches, pre-tournaent AP, week 4 (both), and pre-tournament coaches are the strongest predictors. Therefore, while our predictions may be best from the early-season polls, late-season polls help us to minimize RSS and better differentiate between teams. This makes a lot of sense - you can get broad interpretations of which schools are best pre-season, and refine predictions with late-season polls.

For tournament round, it is a similar story, the strongest predictors are preseason (both), week 3/4 (AP), week 16 (oth) and week 3/4 (coaches). This is the same general pattern, then, as before - we see early and late season polls come into play, while mid-season polls are not particularly predictive. Looking at Gini, it is somewhat similar: week 16 (both), pre-tournament (both), week 4 (both), and then later-season coaches polls are the most useful. 


## Part 3: Which AP Polls are Best?

```{r}
#| label: just ap polls

set.seed(526)
rf_ap_wins <- randomForest(total_wins ~ .-tournament_round,
                           data = tpfr_ap,
                           importance = TRUE)
varImpPlot(rf_ap_wins)

set.seed(526)
rf_ap_round <- randomForest(tournament_round ~ .-total_wins,
                            data = tpfr_ap,
                            importance = TRUE)
varImpPlot(rf_ap_round)
```

For wins, there are five clear front-runners (depending on metric): preseason, pre-tournament, and week 4 (both), week 3 (MSE), and week 16 (purity). For round, this set of polls is almost exactly the same, except the preseason AP poll is not as good at differentiating in the Gini index.


## Part 4: Which Coaches Polls are Best?

```{r}
#| label: just coaches polls

set.seed(526)
rf_coaches_wins <- randomForest(total_wins ~ .-tournament_round,
                           data = tpfr_coaches,
                           importance = TRUE)
varImpPlot(rf_coaches_wins)

set.seed(526)
rf_coaches_round <- randomForest(tournament_round ~ .-total_wins,
                            data = tpfr_coaches,
                            importance = TRUE)
varImpPlot(rf_coaches_round)
```

For wins, there are six clear front-runners: preseason, week 3/4, and pre-tournament (both), week 11 (MSE), and week 16 (purity). For round, results are a little more diffuse, but it is generally the same pattern - Gini emphasizes late season polls more, while accuracy favors early season polls. In fact, in this situation, pre-season coaches poll is the single best predictor (by like a lot) for accuracy.


# Fouls

```{r}
#| label: fouls per game over time

fouls_df %>% 
  mutate(school_label = paste0(school_clean_dict, " (", year, ")")) %>% 
  ggplot(aes(x = fouls_per_game_season, y = fouls_per_game_tournament)) +
  geom_point(alpha = 0.6, aes(color = year)) +
  geom_smooth(method = "lm", se = FALSE) +
  geom_abline(intercept = 0, slope = 1, lwd = 1, color = "black",
              linetype = "dashed") +
  geom_label_repel(aes(label = if_else(fouls_per_game_season > 19 &
                                  fouls_per_game_tournament > 25,
                                school_label,
                                NA),
                       fill = year),
                   min.segment.length = 0,
                   color = "grey40",
                   fontface = "bold") +
  theme_bw() +
  labs(x = "Fouls Per Game (Regular Season)",
       y = "Fouls Per Game (NCAA Tournament)",
       title = "Fouls Per Game: Tournament vs. Regular Season",
       color = "Year",
       fill = "Year") +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom") +
  scale_color_viridis(discrete = TRUE, direction = -1) +
  scale_fill_viridis(discrete = TRUE, direction = -1)
```

Generally speaking, referees are predicted to call ever so slightly more fouls per game in the tournament than in the regular season, most notably among teams that are already more foul-prone. This graph also suggests the possibility that fewer fouls are being called in more recent tournaments than in earlier tournaments, which we investigate next.

```{r}
#| label: foul calls over time

fouls_df %>% 
  select(year, fouls_per_game_season, fouls_per_game_tournament) %>% 
  rename(Season = fouls_per_game_season,
         Tournament = fouls_per_game_tournament) %>% 
  pivot_longer(-year) %>% 
  group_by(year, name) %>% 
  summarize(avg_fouls = mean(value)) %>% 
  ungroup() %>% 
  ggplot(aes(x = year, y = avg_fouls)) +
  geom_col() +
  facet_wrap(~name) +
  theme_bw() +
  labs(x = "Season", y = "Average Fouls Per Game",
       title = "Referees Are Calling Fewer Fouls Over Time") +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_x_discrete(breaks = seq(2014, 2024, by = 2)) +
  coord_cartesian(ylim = c(15, 19))
```

In general, referees are calling fewer fouls over time, both in the regular season and in the NCAA tournament. Note that this graph is somewhat misleading - fouls per game have come down from ~18 in 2014 to ~16 in 2024. It's worth noting that in the 2022 season, regular-seaosn fouls were at their lowest in since 2014, but NCAA tournament fouls did not keep up with that. We see the disparity in these foul calls over time below.

```{r}
#| label: foul call difference over time

fouls_df %>% 
  mutate(foul_diff = fouls_per_game_tournament - fouls_per_game_season) %>% 
  group_by(year) %>% 
  summarize(Mean = mean(foul_diff),
            Median = median(foul_diff),
            #n_games = n(),
            mean_fouls_tournament = mean(n_fouls / n_games)) %>% 
  ungroup() %>% 
  pivot_longer(c(Mean, Median), names_to = "stat", values_to = "diff") %>% 
  ggplot(aes(x = year, y = diff, fill = mean_fouls_tournament)) +
  geom_col() +
  facet_wrap(~stat) +
  theme_bw() +
  labs(x = "Tournament", y = "Surplus Fouls in Tournament",
       title = "Referees Call Slightly More Fouls in NCAAT, On Average",
       fill = "Average Fouls per Team per Game") +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom") +
  scale_fill_viridis(direction = -1, breaks = seq(16, 19)) +
  scale_x_discrete(breaks = seq(2014, 2024, by = 2))


fouls_df %>% 
  mutate(foul_diff = fouls_per_game_tournament - fouls_per_game_season) %>% 
  ggplot(aes(x = foul_diff, y = year)) +
  geom_density_ridges(alpha = 0.5) +
  theme_bw() +
  labs(x = "Surplus Fouls in Tournament", y = "Year",
       title = "In General, Referees Call Similar Fouls in Regular Season and Tournament") +
  theme(plot.title = element_text(hjust = 0.5))
```

In general, fouls in the tournament and fouls in the regular season are actually very closely aligned - they are almost always within a foul per game (per team) of one another. I am curious what changed from 2019/2021 to 2022 - 2022 saw a huge spike in surplus fouls called, following a couple years of that metric being down.

Now we get to everyone's favorite question: Are the referees rigging my game?

```{r}
#| label: refs of interest plot

foul_diff_df %>% 
  pivot_longer(starts_with("referee"), values_to = "referee") %>% 
  filter(referee %in% refs_of_interest) %>% 
  group_by(referee) %>% 
  mutate(more_than_normal = if_else(median(foul_diff) > 0, "more", "fewer")) %>% 
  ungroup() %>% 
  select(referee, foul_diff, more_than_normal) %>% 
  group_by(referee) %>% 
  mutate(n_games = n() / 2,
         med_diff = median(foul_diff),
         mean_diff = mean(foul_diff)) %>% 
  ungroup() %>% 
  mutate(name_label = paste0(referee, " (", round(mean_diff, 2), ")")) %>% 
  ggplot(aes(x = foul_diff, fill = n_games)) +
  geom_density(alpha = 0.6) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  facet_wrap(~reorder(name_label, mean_diff)) +
  theme_bw() +
  labs(x = "Surplus Fouls in Tourrnament", y = "Percent of Games",
       fill = "Number of Games Officiated",
       title = "Officials Whose Games Frequently Vary From Regular-Season Expectations",
       caption = "Numbers represent mean deviation from regular-season fouls") +
  theme(panel.grid.minor = element_blank(),
        legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) +
  scale_fill_viridis(direction = -1) +
  scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, .2, .1)) +
  scale_x_continuous(breaks = seq(-10, 10, by = 10))
```

We can see there are some referees who frequently officiate games in which a disparate number of fouls are called. However, these are uncommon. Of the ones we did consider, it is far more common for the officiated games to have fewer fouls called compared to the regular season, rather than more.


```{r}
#| label: free throw disparity 1

foul_disparity_games %>% 
  select(home, away, date, foul_disparity, home_cooking,
         starts_with("referee")) %>% 
  mutate(team_favored = if_else(home_cooking > 0, home, away),
         .after = "foul_disparity") %>% 
  select(-home_cooking) %>% 
  arrange(desc(foul_disparity)) %>% 
  filter(foul_disparity >= 20) %>% 
  knitr::kable(col.names = c("Home Team", "Away Team", "Date",
                             "Free Throw Disparity", "Team Benefitting",
                             "Referee 1", "Referee 2", "Referee 3"))
# Removing it from here, but every time this happens, the team benefitting wins

ggplot(foul_disparity_games, aes(x = foul_disparity)) +
  geom_histogram(color = "white", binwidth = 1) +
  theme_bw() +
  labs(x = "Absolute Difference in Free Throws", y = "Number of Games",
       title = "Substantial Free Throw Disparity is Not Uncommon") +
  theme(plot.title = element_text(hjust = 0.5))


ggplot(foul_disparity_games, aes(x = home_cooking)) +
  geom_density(fill = "grey", alpha = 0.6) +
  geom_vline(xintercept = median(foul_disparity_games$home_cooking),
             linetype = "dashed") +
  theme_bw() +
  labs(x = "Home Team Free Throw Advantage", y = "Percent of Games",
       title = "Home Teams are Slightly Favored in Free Throw Attempts") +
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(labels = scales::percent_format())
```

In general, there are not huge disparities in free throws - home teams are slightly favored, but not by extreme margins. However, there have been a handful of games with absolutely massive free throw disparities - and in every one of those games, the team shooting more free throws wins.

```{r}
#| label: free throw disparity overcome

foul_disparity_games %>% 
  mutate(game_winner = if_else(home_score > away_score, home, away)) %>% 
  select(home, away, game_winner, date, foul_disparity, home_cooking,
         starts_with("referee")) %>% 
  mutate(team_favored = if_else(home_cooking > 0, home, away),
         .after = "foul_disparity") %>% 
  mutate(team_favored_won = if_else(team_favored == game_winner, TRUE, FALSE)) %>% 
  arrange(desc(foul_disparity)) %>% 
  filter(team_favored_won == FALSE) %>% 
  filter(foul_disparity >= 10) %>% 
  select(home, away, date, foul_disparity, team_favored, starts_with("referee")) %>% 
  knitr::kable(col.names = c("Home Team", "Away Team", "Date",
                             "Free Throw Disparity", "Team Benefitting",
                             "Referee 1", "Referee 2", "Referee 3"))
```

The biggest free throw disparity a team has been able to overcome was 16 (once), followed by 15 (five times) and 14 (three times). Usually, this happens when the away team (i.e., lower seed) is the team benefitting.

```{r}
#| label: consistent free throw disparities

foul_disparity_games %>% 
  mutate(game_winner = if_else(home_score > away_score, home, away)) %>% 
  select(tournament, home, away, foul_disparity, home_cooking) %>% 
  pivot_longer(c(home, away), names_to = "which_team", values_to = "team") %>% 
  mutate(was_favored = case_when(
    which_team == "home" & home_cooking >= 0 ~ TRUE,
    which_team == "home" & home_cooking < 0 ~ FALSE,
    which_team == "away" & home_cooking > 0 ~ FALSE,
    which_team == "away" & home_cooking <= 0 ~ TRUE,
    TRUE ~ NA
  )) %>% 
  mutate(directional_margin = if_else(was_favored == TRUE, foul_disparity,
                                      -foul_disparity)) %>% 
  group_by(team) %>% 
  summarize(success_rate = mean(was_favored),
            avg_margin = mean(directional_margin),
            n_games = n()) %>% 
  filter(n_games >= 5) %>% 
  arrange(desc(success_rate)) %>% 
  slice(1:10, 75:84) %>% 
  mutate(half = if_else(success_rate > .5, "Highest", "Lowest")) %>%
  mutate(success_rate = paste0(as.character(round(success_rate * 100, 0)), "%")) %>% 
  knitr::kable(digits = 2, col.names = c("Team", "Games Shooting Plus Free Throws",
                                         "Average Free Throw Margin",
                                         "Total Games", "Status"))
# was_favored returns true if the free throw differential was 0 (i.e., didn't get screwed)
# Probably best to let this be two tables



  #mutate(row_n = row_number()) %>% 
  #filter(team == "Duke")
# Duke is 21st, with a success rate of 64.5% and an average free throw advantage of 3.68 across 31 games
```

In general, there are some teams who are routinely shooting more free throws than their opponents, but it isn't necessarily the traditional powerhouse teams we would expect. More notably, Duke is not featured here :)



